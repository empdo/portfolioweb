import { type NextPage } from "next";
import Head from "next/head";
import Nav from "../components/Nav";
import Header from "../components/Header";
import Projects from "../components/Projects";
import { useState, useEffect, useRef} from "react";
import { ApolloClient, InMemoryCache, createHttpLink, gql } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import useOnScreen from '../components/useOnScreen';

import {repository} from "../../interfaces";

import { Inter } from '@next/font/google'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
})


const Home: NextPage = (props: { pinnedItems: repository[]}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const show = useOnScreen(containerRef);

  return (
    <div className={`${inter.variable} font-sans scroll-smooth`}>
      <Head>
        <title>EE</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={"flex-col flex snap-y snap-mandatory min-h-screen bg-gradient-to-r from-slate-900 to-gray-900"}>
        <section className={"flex flex-col min-h-screen items-center justify-center max-w-page mx-auto snap-center"}>
          <Nav />
          <Header />
        </section>
        <section className={"flex flex-col min-h-screen items-center justify-center max-w-page mx-auto snap-center"}>
          <div ref={containerRef}>
            <Projects show={show} projects={props.pinnedItems} />
          </div>
        </section>
      </main>
    </div>
  );
};

export async function getStaticProps() {
  const httpLink = createHttpLink({
    uri: 'https://api.github.com/graphql',
  });

  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN || ""}`,
      }
    }
  });

  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache()
  });

const {data} =  await client.query({
    query: gql`{
        viewer {
            login
          }
          user(login: "empdo") {
            pinnedItems(first: 6) {
              totalCount
              edges {
                node {
                  ... on Repository {
                    id
                    name
                    stargazerCount
                    url
                    primaryLanguage {
                      name
                      color
                    }
                    repositoryTopics(first: 2) {
                      nodes {
                        topic {
                          name
                          id
                        }
                      }
                    }
                    description
                  }
                }
              }
            }
        }      
      }`
    }
  )
  
  const {user} = data;
  const pinnedItems : repository[] = user.pinnedItems.edges.map(({node}) => node);

  return {
    props: {
      pinnedItems
    }
  }
}

export default Home;
